import pandas as pd
import matplotlib.pyplot as pit

df = pd.read_csv("/Users/stephaniechurch/Documents/stack-overflow-developer-survey-2021/survey_results_public.csv")
[2]
df.head()

[3]
df = df[["Country", "EdLevel", "YearsCodePro", "Employment", "CompTotal"]]
df = df.rename ({"CompTotal": "Salary"}, axis=1)
df.head()

[4]
df = df[df["Salary"].notnull()]
df.head()

[5]
df.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 47183 entries, 0 to 83438
Data columns (total 5 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   Country       47183 non-null  object 
 1   EdLevel       47162 non-null  object 
 2   YearsCodePro  46723 non-null  object 
 3   Employment    47167 non-null  object 
 4   Salary        47183 non-null  float64
dtypes: float64(1), object(4)
memory usage: 2.2+ MB

[6]
df = df.dropna()
df.isnull().sum()
Country         0
EdLevel         0
YearsCodePro    0
Employment      0
Salary          0
dtype: int64
[7]
df = df[df["Employment"] == "Employed full-time"]
df = df.drop("Employment", axis=1)
df.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 40399 entries, 9 to 83438
Data columns (total 4 columns):
 #   Column        Non-Null Count  Dtype  
---  ------        --------------  -----  
 0   Country       40399 non-null  object 
 1   EdLevel       40399 non-null  object 
 2   YearsCodePro  40399 non-null  object 
 3   Salary        40399 non-null  float64
dtypes: float64(1), object(3)
memory usage: 1.5+ MB

[8]
df['Country'].value_counts()
United States of America                                9217
India                                                   3434
Germany                                                 2758
United Kingdom of Great Britain and Northern Ireland    2609
Canada                                                  1556
                                                        ... 
Saint Kitts and Nevis                                      1
Monaco                                                     1
Libyan Arab Jamahiriya                                     1
Somalia                                                    1
Burundi                                                    1
Name: Country, Length: 166, dtype: int64
[9]
def shorten_categories(categories, cutoff):
    categorical_map = {}
    for i in range(len(categories)):
        if categories.values[i] >= cutoff:
            categorical_map[categories.index[i]] = categories.index[i]
        else:
            categorical_map[categories.index[i]] = 'Other'
    return categorical_map
[10]
country_map = shorten_categories(df.Country.value_counts(), 400)
df['Country'] = df['Country'].map(country_map)
df.Country.value_counts()
Other                                                   10787
United States of America                                 9217
India                                                    3434
Germany                                                  2758
United Kingdom of Great Britain and Northern Ireland     2609
Canada                                                   1556
France                                                   1399
Brazil                                                   1343
Spain                                                     890
Netherlands                                               839
Australia                                                 827
Poland                                                    776
Italy                                                     761
Russian Federation                                        743
Sweden                                                    735
Turkey                                                    458
Switzerland                                               439
Israel                                                    425
Norway                                                    403
Name: Country, dtype: int64
[11]
from matplotlib import pyplot as plt
fig, ax = plt.subplots(1,1, figsize=(12, 7))
df.boxplot('Salary', 'Country', ax=ax)
plt.suptitle('Salary (US$) v Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()


[12]
df = df[df["Salary"] <= 200000]
df = df[df["Salary"] >= 40000]
df = df[df['Country'] != 'Other']
[13]
fig, ax = plt.subplots(1,1, figsize=(12, 7))
df.boxplot('Salary', 'Country', ax=ax)
plt.suptitle('Salary (US$) v Country')
plt.title('')
plt.ylabel('Salary')
plt.xticks(rotation=90)
plt.show()

[14]
df["YearsCodePro"].unique()
array(['4', '5', '6', '18', '21', '16', '10', 'Less than 1 year', '12',
       '3', '15', '8', '17', '1', '14', '7', '26', '2', '34', '11', '25',
       '24', '22', '13', '9', '39', '20', '27', '23', '19', '33', '35',
       '30', '43', '40', '29', '45', '31', '42', '28', '46', '32', '36',
       '37', '38', '44', '41', 'More than 50 years', '50', '47', '49',
       '48'], dtype=object)
[15]
def clean_experience(x):
    if x == 'More than 50 years':
        return 50
    if x == 'Less than 1 year':
        return 0.5
    return float(x)
df['YearsCodePro'] = df['YearsCodePro'].apply(clean_experience)

[16]
df["EdLevel"].unique()
array(['Master’s degree (M.A., M.S., M.Eng., MBA, etc.)',
       'Bachelor’s degree (B.A., B.S., B.Eng., etc.)',
       'Professional degree (JD, MD, etc.)',
       'Some college/university study without earning a degree',
       'Other doctoral degree (Ph.D., Ed.D., etc.)', 'Something else',
       'Primary/elementary school', 'Associate degree (A.A., A.S., etc.)',
       'Secondary school (e.g. American high school, German Realschule or Gymnasium, etc.)'],
      dtype=object)
[17]
def clean_education(x):
    if 'Bachelor’s degree' in x:
        return "Bachelor's degree"
    if 'Master’s degree' in x:
        return "Master's degree"
    if "Professional degree" in x or 'Other doctoral' in x:
        return "Post grad"
    return "less than Bachelor's"

df['EdLevel'] = df['EdLevel'].apply(clean_education)

[18]
df["EdLevel"].unique()
array(["Master's degree", "Bachelor's degree", 'Post grad',
       "less than Bachelor's"], dtype=object)
[19]
from sklearn.preprocessing import LabelEncoder
le_education = LabelEncoder()
df['EdLevel'] = le_education.fit_transform(df['EdLevel'])
df["EdLevel"].unique()
array([1, 0, 2, 3])
[20]
le_country = LabelEncoder()
df['Country'] = le_country.fit_transform(df['Country'])
df["Country"].unique()
array([13, 12,  4,  2, 14, 16, 11, 17,  7,  8,  3,  0,  5, 15,  6, 10,  1,
        9])
[21]
x = df.drop("Salary", axis=1)
y = df["Salary"]
[22]
from sklearn.linear_model import LinearRegression
linear_reg = LinearRegression()
linear_reg.fit(x, y.values)
LinearRegression()
[23]
y_pred = linear_reg.predict(x)
[24]
from sklearn.metrics import mean_squared_error, mean_absolute_error
import numpy as np
error = np.sqrt(mean_squared_error(y, y_pred))
[25]
error
40028.673009047016
[26]
from sklearn.tree import DecisionTreeRegressor
dec_tree_reg = DecisionTreeRegressor(random_state=0)
dec_tree_reg.fit(x, y.values)
dec_tree_reg.get_params()
{'ccp_alpha': 0.0,
 'criterion': 'squared_error',
 'max_depth': None,
 'max_features': None,
 'max_leaf_nodes': None,
 'min_impurity_decrease': 0.0,
 'min_samples_leaf': 1,
 'min_samples_split': 2,
 'min_weight_fraction_leaf': 0.0,
 'random_state': 0,
 'splitter': 'best'}
[27]
y_pred = dec_tree_reg.predict(x)
[28]
error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))
$29,763.01

[29]
from sklearn.ensemble import RandomForestRegressor
random_forest_reg = RandomForestRegressor (random_state=0)
random_forest_reg.fit(x, y.values)
RandomForestRegressor(random_state=0)
[30]
y_pred = random_forest_reg.predict(x)
[31]
error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))
$29,864.03

[32]
import json
from sklearn.model_selection import GridSearchCV

max_depth = [None, 2,4,6,7,10,12]
parameters = {"max_depth": max_depth}

regressor = DecisionTreeRegressor(random_state=0)
gs = GridSearchCV(regressor, parameters, scoring='neg_mean_squared_error')
gs.fit(x, y.values)
GridSearchCV(estimator=DecisionTreeRegressor(random_state=0),
             param_grid={'max_depth': [None, 2, 4, 6, 7, 10, 12]},
             scoring='neg_mean_squared_error')
[33]
regressor = gs.best_estimator_

regressor.fit(x, y.values)
y_pred = regressor.predict(x)
error = np.sqrt(mean_squared_error(y, y_pred))
print("${:,.02f}".format(error))
$31,200.22

[34]
x

[35]
x = np.array([["United States of America", "Master's degree", 15]])
x
array([['United States of America', "Master's degree", '15']],
      dtype='<U24')
[36]
x[:,0] = le_country.transform(x[:,0])
x[:,1] = le_education.transform(x[:,1])
x = x.astype(float)
x
array([[17.,  1., 15.]])
[37]
y_pred = dec_tree_reg.predict(x)
y_pred
/Users/stephaniechurch/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names
  warnings.warn(

array([138392.18461538])
[38]
import pickle
[39]
data = {"model": regressor, "le_country": le_country, "le_education": le_education}
with open ('saved_steps.pkl', 'wb') as read_file:
    pickle.dump(data, read_file)
[40]
with open ('saved_steps.pkl', 'rb') as file:
    data = pickle.load(file)
    
regressor_loaded = data["model"]
le_country = data['le_country']
le_education  = data['le_education']
[41]
y_pred = dec_tree_reg.predict(x)
y_pred
/Users/stephaniechurch/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names
  warnings.warn(

array([138392.18461538])
